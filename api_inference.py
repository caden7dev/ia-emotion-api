import os
from fastapi import FastAPI
from pydantic import BaseModel
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification

# --- CONFIGURATION ---
MODEL_PATH = "./final_emotion_model"
# Assurez-vous que le mod√®le est bien charg√©
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"Le dossier du mod√®le n'a pas √©t√© trouv√© √† l'emplacement : {MODEL_PATH}")

# 1. Chargement du Mod√®le et du Tokenizer (effectu√© une seule fois au d√©marrage de l'API)
print("D√©marrage de l'API : Chargement du mod√®le en m√©moire...")
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH)

emotion_pipeline = pipeline(
    "sentiment-analysis", 
    model=model, 
    tokenizer=tokenizer
)
print("‚úÖ Mod√®le d'analyse √©motionnelle pr√™t.")

# 2. D√©finition de l'Application FastAPI
app = FastAPI(
    title="Emotion Inference API",
    description="API pour l'analyse √©motionnelle des textes en temps r√©el (BERT Multilingue)."
)

# 3. D√©finition du Sch√©ma de Donn√©es pour la Requ√™te
class TextRequest(BaseModel):
    text: str

# 4. D√©finition du Endpoint de Pr√©diction
@app.post("/predict_emotion")
def predict_emotion(request: TextRequest):
    """
    Analyse le texte fourni et retourne l'√©motion pr√©dite et le score de confiance.
    """
    
    # 5. Pr√©diction : DEMANDE DES 5 MEILLEURS R√âSULTATS
    # Cela permet de v√©rifier l'h√©sitation du mod√®le
    result_top_k = emotion_pipeline(request.text, top_k=5)
    
    # Affiche les 5 meilleurs r√©sultats pour le d√©bogage dans le terminal Uvicorn
    print("\n--- Meilleurs r√©sultats du Mod√®le ---")
    print(result_top_k)
    print("-----------------------------------\n")

    # 6. LOGIQUE DE CORRECTION POUR LE "NEUTRE" FAIBLE
    
    emotion_data = result_top_k[0] # Le r√©sultat le plus confiant (souvent 'neutre')
    
    # Si le r√©sultat principal est 'neutre', on regarde si une autre √©motion est proche
    if emotion_data['label'] == 'neutre' and len(result_top_k) > 1:
        
        # R√©cup√®re l'√©motion non-neutre la plus probable (le deuxi√®me meilleur r√©sultat)
        best_non_neutral = result_top_k[1]
        
        # Seuil d'h√©sitation : si l'√©motion non-neutre est √† moins de 5 points de pourcentage (0.05) du neutre
        NEUTRAL_TOLERANCE = 0.05 
        
        if (emotion_data['score'] - best_non_neutral['score']) < NEUTRAL_TOLERANCE:
            # Si le mod√®le h√©site, on choisit l'√©motion non-neutre pour l'action UX
            print(f"Correction: Le mod√®le h√©sitait (Neutre {emotion_data['score']:.2f} vs {best_non_neutral['label']} {best_non_neutral['score']:.2f}). Choix de {best_non_neutral['label']}.")
            
            emotion_label = best_non_neutral['label']
            score = best_non_neutral['score']
        else:
            # Si 'neutre' est beaucoup plus confiant (√©cart > 0.05), on le garde.
            emotion_label = emotion_data['label']
            score = emotion_data['score']
    
    else:
        # Si la meilleure pr√©diction n'est pas 'neutre', on la garde
        emotion_label = emotion_data['label']
        score = emotion_data['score']
        
    # --- LOGIQUE D'ACTION UX D√âPENDANT DE L'√âMOTION FINALE ---
    ux_action = "Aucune action sp√©cifique n'est sugg√©r√©e pour cette √©motion."
    
    # üö® R√àGLE 1 : GESTION DES √âMOTIONS DE D√âTRESSE (√âthique et S√©curit√©)
    if emotion_label in ['tristesse', 'chagrin', 'remords', 'peur']: 
        ux_action = "Parle de ta situation √† une personne de confiance pour te conseiller et t'aider."
    
    # R√àGLE 2 : GESTION DES √âMOTIONS N√âGATIVES FORTES (Frustration / Col√®re)
    elif emotion_label in ['col√®re', 'ennui', 'd√©ception', 'd√©sapprobation']:
        ux_action = "Je vois que tu n'es pas de bonne humeur. Je te sugg√®re de prendre une pause d'au moins 30 minutes pour te relaxer et revenir, et surtout n'oublie pas de sauvegarder ton travail en cours."
    
    # R√àGLE 3 : GESTION DES √âMOTIONS POSITIVES (Encouragement)
    elif emotion_label in ['joie', 'excitation', 'amour', 'fiert√©', 'gratitude', 'optimisme', 'admiration']:
        ux_action = "F√©licitation pour ta bonne humeur. Continue dans cet √©tat d'esprit jusqu'√† la fin."
    
    # FIN DE LA LOGIQUE D'ACTION UX
    
    return {
        "text": request.text,
        "emotion": emotion_label,
        "score": f"{score:.4f}",
        "ux_action_sugeree": ux_action
    }

# 7. Endpoint de Bienvenue
@app.get("/")
def home():
    return {"message": "Bienvenue √† l'API d'Inf√©rence √âmotionnelle. Utilisez l'endpoint /predict_emotion."}

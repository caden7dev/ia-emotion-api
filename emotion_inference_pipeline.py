import os
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification

# --- CONFIGURATION ---
# --- CONFIGURATION ---
MODEL_PATH = "./final_emotion_model"
MODEL_NAME = "bert-base-multilingual-cased" # Gardez-le en commentaire ou pour r√©f√©rence
# ...
# Le tokenizer doit √™tre le m√™me que celui utilis√© pour l'entra√Ænement
# üí• CORRECTION : Chargez le tokenizer depuis votre dossier local, pas depuis le Hub !
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH) 

# Le mod√®le sauvegard√© contient la configuration des √©tiquettes (id2label)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH)
TEXT_TO_ANALYZE_FR = "Je suis vraiment frustr√© par la lenteur de ce code. Je n'arrive pas √† avancer."
# L'utilisation du fran√ßais est un test cl√© car nous avons entra√Æn√© le mod√®le sur de l'anglais
# avec un tokenizer multilingue.

def run_inference():
    print(f"Chargement du mod√®le entra√Æn√© depuis : {MODEL_PATH}")
    
    # Le tokenizer doit √™tre le m√™me que celui utilis√© pour l'entra√Ænement
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
    
    # Le mod√®le sauvegard√© contient la configuration des √©tiquettes (id2label)
    model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH)

    # Cr√©er le 'pipeline' de classification (l'outil le plus simple pour l'inf√©rence)
    emotion_pipeline = pipeline(
        "sentiment-analysis", 
        model=model, 
        tokenizer=tokenizer
    )

    print("\n--- TEST DE PR√âDICTION ---")
    print(f"Texte √† analyser (FR) : '{TEXT_TO_ANALYZE_FR}'")
    
    # Lancer la pr√©diction
    result = emotion_pipeline(TEXT_TO_ANALYZE_FR)
    
    # Afficher le r√©sultat
    if result:
        emotion_label = result[0]['label']
        score = result[0]['score']
        
        print("\n‚úÖ R√©sultat de l'analyse √©motionnelle :")
        print(f"   √âmotion pr√©dite : {emotion_label}")
        print(f"   Score de confiance : {score:.4f}")
        
        # --- L'innovation UX commence ici ---
        # Cette partie doit √™tre int√©gr√©e √† votre application React Native
        if emotion_label == 'frustration':
            print("\nüí° ACTION UX SUGG√âR√âE : D√©tectant de la frustration, l'application propose de sauvegarder et de prendre une pause de 10 minutes.")
        elif emotion_label == 'concentration':
            print("\nüí° ACTION UX SUGG√âR√âE : D√©tectant une forte concentration, l'application active un mode 'Ne pas d√©ranger' automatique.")
        else:
             print("\nüí° ACTION UX SUGG√âR√âE : Aucune action sp√©cifique n'est sugg√©r√©e pour cette √©motion.")


if __name__ == "__main__":
    # Assurez-vous d'abord que le dossier final_emotion_model existe (entra√Ænement termin√©)
    if os.path.exists(MODEL_PATH):
        run_inference()
    else:
        print(f"‚ö†Ô∏è Erreur : Le mod√®le n'a pas √©t√© trouv√© √† l'emplacement {MODEL_PATH}.")
        print("   Veuillez attendre que le script emotion_fine_tuning.py termine son entra√Ænement.")